import bncurve/groups

let a = Point[G1](x: FQ.fromString("18146081117034566551615675876624123893458101625025490076525010660193712150330"), y: FQ.fromString("2746707393924179218386463285868839937790368359620721548988512670540297355908"));
let b = Point[G2](x: FQ2(c0: FQ.fromString("12824216792137621579234745073388856071481032935916020657597900620740760297849"),  c1: FQ.fromString("8405087892864737790593087745089698207877059446516524627549745691716229382557")), y: FQ2(c0: FQ.fromString("13396073260649639270973109528115383060969420638639704406312446489885730254567"), c1: FQ.fromString("6246543021631814782727070470127834760554617681557725501923963198266332318086")));
let c = Point[G1](x: FQ.fromString("19957523323444122874369982710905768090111886824486494894576839360788835698035"), y: FQ.fromString("7179739722737676650683067764406821376055010193220135503680426381348604733795"));

let pubInput1 = Fr.fromString("5966029082507805980254291345114545245067072315222408966008558171151621124246");
let pubInput2 = Fr.fromString("4");
let pubInput3 = Fr.fromString("12857343771181087157409557648182655546684462713036905539892384468792366321123");
let pubInput4 = Fr.fromString("6");

let vkGamma2 = Point[G2](x: FQ2(c0: FQ.fromString("10857046999023057135944570762232829481370756359578518086990519993285655852781"),  c1: FQ.fromString("11559732032986387107991004021392285783925812861821192530917403151452391805634")), y: FQ2(c0: FQ.fromString("8495653923123431417604973247489272438418190587263600148770280649306958101930"), c1: FQ.fromString("4082367875863433681332203403145435568316851327593401208105741076214120093531")));
let vkDelta2 = Point[G2](x: FQ2(c0: FQ.fromString("10857046999023057135944570762232829481370756359578518086990519993285655852781"),  c1: FQ.fromString("11559732032986387107991004021392285783925812861821192530917403151452391805634")), y: FQ2(c0: FQ.fromString("8495653923123431417604973247489272438418190587263600148770280649306958101930"), c1: FQ.fromString("4082367875863433681332203403145435568316851327593401208105741076214120093531")));
let vkAlpha1 = Point[G1](x: FQ.fromString("20491192805390485299153009773594534940189261866228447918068658471970481763042"), y: FQ.fromString("9383485363053290200918347156157836566562967994039712273449902621266178545958"));
let vkBeta2 = Point[G2](x: FQ2(c0: FQ.fromString("6375614351688725206403948262868962793625744043794305715222011528459656738731"),  c1: FQ.fromString("4252822878758300859123897981450591353533073413197771768651442665752259397132")), y: FQ2(c0: FQ.fromString("10505242626370262277552901082094356697409835680220590971873171140371331206856"), c1: FQ.fromString("21847035105528745403288232691147584728191162732299865338377159692350059136679")));

let ic0 = Point[G1](x: FQ.fromString("706379018155535256962477732371233220466708339901980356433001244491557802555"), y: FQ.fromString("4480393274324694606740273847152739935785341335793427064452769423150137645723"));
let ic1 = Point[G1](x: FQ.fromString("17837901911804605285297409986388117208284346058685201952011529585560457604634"), y: FQ.fromString("7414095085265322290660687416786947206302547167465563600132947556765327952157"));
let ic2 = Point[G1](x: FQ.fromString("5920610752033984868722983985018269172910549821655947384123617951993592075482"), y: FQ.fromString("11848325982574142771615208364904186208779501862530910563084092857749141690541"));
let ic3 = Point[G1](x: FQ.fromString("1196471500819398757358134693372449972176484892277709500161937870737063187627"), y: FQ.fromString("19154594010985705403769425727493565025975631811123970281744913692141993450496"));
let ic4 = Point[G1](x: FQ.fromString("15623951096190695614146478577075985704108248409680229837432779925736976456748"), y: FQ.fromString("8964065099173481020202008428540740627298045946699781610238419135482384824157"));

var preparedInputs = ic0;
preparedInputs = preparedInputs + ic1 * pubInput1;
preparedInputs = preparedInputs + ic2 * pubInput2;
preparedInputs = preparedInputs + ic3 * pubInput3;
preparedInputs = preparedInputs + ic4 * pubInput4;

let alphaBetaPairing = pairing(-vkAlpha1, vkBeta2);
let proofCVkDeltaPairing = pairing(c, vkDelta2);
let preparedInputsGammaPairing = pairing(prepared_inputs, vkGamma2);
let proofAProofBPairing = pairing(a, b);

echo $alphaBetaPairing;

echo alphaBetaPairing == proofCVkDeltaPairing;
echo proofCVkDeltaPairing == preparedInputsGammaPairing;
echo preparedInputsGammaPairing == proofAProofBPairing;

echo "Hello world";
